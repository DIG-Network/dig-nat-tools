# Multi-stage Docker build for Gun.js relay server
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci

# Copy build configuration
COPY tsconfig.json ./
COPY build.mjs ./

# Copy source code
COPY src/ ./src/

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S gunrelay && \
    adduser -S gunrelay -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist/ ./dist/

# Create data directory for Gun.js storage
RUN mkdir -p /app/gun-data && \
    chown -R gunrelay:gunrelay /app

# Switch to non-root user
USER gunrelay

# Expose port
EXPOSE 8765

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "const http = require('http'); \
    const req = http.request({hostname: 'localhost', port: process.env.PORT || 8765, path: '/health', timeout: 2000}, \
      (res) => process.exit(res.statusCode === 200 ? 0 : 1)); \
    req.on('error', () => process.exit(1)); \
    req.end();"

# Environment variables with defaults
ENV NODE_ENV=production
ENV PORT=8765
ENV UPNP_ENABLED=true
ENV UPNP_TTL=7200

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the relay server
CMD ["node", "dist/relay.js"]
